name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Show uname
      run: uname -a

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@v1.1
      
    - name: Setup Python
      uses: actions/setup-python@v2.3.3
      with:
        python-version: '3.10'
        
    - name: Install Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.1.1
      with:
        cache: true

    - name: cache-swiftshader
      id: cache-swiftshader
      uses: actions/cache@v3
      with:
        path: swiftshader-install
        key: swiftshader-linux-install-20220211

    - name: checkout-swiftshader
      if: steps.cache-swiftshader.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: google/swiftshader
        path: swiftshader
        ref: 0863290dc7f6cc1649bab1858790e812b8aef02a

    - name: checkout-swiftshader-submodules
      if: steps.cache-swiftshader.outputs.cache-hit != 'true'
      run: |
        cd swiftshader
        git -c submodule."third_party/git-hooks".update=none submodule update --init --recursive

    - name: swiftshader
      if: steps.cache-swiftshader.outputs.cache-hit != 'true'
      run: |
        cd swiftshader
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DSWIFTSHADER_BUILD_EGL=FALSE -DSWIFTSHADER_BUILD_GLESv2=FALSE -DSWIFTSHADER_BUILD_GLES_CM=FALSE -DSWIFTSHADER_BUILD_VULKAN=TRUE -DSWIFTSHADER_BUILD_PVR=FALSE -DSWIFTSHADER_BUILD_TESTS=FALSE -DSWIFTSHADER_ENABLE_ASTC=FALSE -DSWIFTSHADER_WARNINGS_AS_ERRORS=FALSE -DREACTOR_BACKEND=Subzero -DREACTOR_DEFAULT_OPT_LEVEL=Default -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 4
        mkdir $GITHUB_WORKSPACE/swiftshader-install
        cp Linux/* $GITHUB_WORKSPACE/swiftshader-install

    - name: Install Dependencies
      run: |
        #sudo add-apt-repository ppa:kisak/kisak-mesa
        #sudo apt-get update
        #sudo apt-get install -y libxrandr-dev libxi-dev libxinerama-dev libsdl2-dev libxcursor-dev mesa-vulkan-drivers
        sudo apt-get install -y libxrandr-dev libxi-dev libxinerama-dev libsdl2-dev libxcursor-dev
        export VK_ICD_FILENAMES="$GITHUB_WORKSPACE/swiftshader-install/vk_swiftshader_icd.json"
        pip3 install -r ./ci/requirements.txt
        pip3 install -i https://pypi.taichi.graphics/simple/ taichi-nightly
        mkdir tmp
        pip3 download --no-deps -i https://pypi.taichi.graphics/simple/ taichi-nightly -d tmp
        export TAICHI_WHEEL_NAME=$(ls tmp/taichi_nightly*.whl)
        unzip $TAICHI_WHEEL_NAME -d tmp
        export TAICHI_C_API_INSTALL_DIR=$(pwd)/$(find tmp -name c_api -type d -print | head -1)
        echo "TAICHI_C_API_INSTALL_DIR=$TAICHI_C_API_INSTALL_DIR" >> $GITHUB_ENV
        echo "TI_LIB_DIR=$TAICHI_C_API_INSTALL_DIR/runtime" >> $GITHUB_ENV
        cat $GITHUB_ENV
        

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja

    - name: Build and Test
      run: |
        python3 ./ci/run_tests.py -c github -l $TAICHI_C_API_INSTALL_DIR
